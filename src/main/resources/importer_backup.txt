package com.net2plan.gis.importer.GisLibrary;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import javax.json.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.*;

public class GisImporter
{

	// ArrayList<GisMultilayer> gmlList = new ArrayList<GisMultilayer>();
	Map<String, GisMultilayer> gmlList = new HashMap<String, GisMultilayer>();

	GisMultilayer multilayer;
	String type;
	String name;  
	JoseLuisCrs crs;  
	List<JoseLuisFeature> features;
	
	// Metodo para cargar un geojson y crear GisMultilayer
	public void load(String name, String path) throws FileNotFoundException, IOException
	{
		System.out.println("Dentro del GisImporter.load");
		// Step 1. Finds a resource with a given name
		InputStream inputStream = getClass().getResourceAsStream("/e1.geojson");
		// Creates Streaming parser
		JsonParser jsonParser = new JsonFactory().createParser(inputStream);
		
		// Step 2. Start parsing the contents
		ObjectMapper objectMapper = new ObjectMapper();
		// Continue the parsing till stream is opened or no more token is available
		while(!jsonParser.isClosed()){
			
			JsonToken jsonToken = jsonParser.nextToken();
			// if it is the last token then breatk the loop
			if (jsonToken == null){
				jsonParser.close();
				inputStream.close();
				System.out.println("Finished");
				break;
			}
			// if this is start of the object, then create instance.
			if (jsonToken.equals(JsonToken.START_OBJECT)){
				System.out.println("****************** START OBJECT ******************");
				String keyName = jsonParser.getCurrentName();
				//System.out.println(jsonParser.getText());
				//System.out.println(jsonParser.getCurrentName());
				
				if(keyName != null && !keyName.isEmpty()){
					if(keyName.equals("crs")){
						JoseLuisCrs crs;
						jsonParser.nextToken();
						jsonParser.getCurrentName();
					}
				}


				// Use the objectMapper to copy the current JSON object to the created instance.
				//** employee = objectMapper.readValue(jsonParser, Employee.class);
				//** employeeList.add(employee);
			}else if(jsonToken.equals(JsonToken.FIELD_NAME)){
				System.out.println("****************** FIELD_NAME ******************");
				String keyName = jsonParser.getCurrentName();

				switch(keyName){
				case "type": 
					this.type = jsonParser.nextTextValue();
					System.out.println(keyName + ": " + this.type);
					break;
				case "name": 
					this.name = jsonParser.nextTextValue();
					System.out.println(keyName + ": " + this.name);
					break;	
				case "crs":
					//System.out.println(jsonParser.nextValue().toString());
					break;
					
				case "features":
					break;
				
				default:
				}
			}
			// Close the stream after the use to release the resources
			/*if (inputStream != null){
				inputStream.close();
			}
			if (jsonParser != null){
				jsonParser.close();
			}*/
		}
	}

	public GisMultilayer getMultilayer(String name)
	{
		return gmlList.get(name);
	}

	public Collection<GisMultilayer> getMultilayers()
	{
		return gmlList.values();
	}

	public static void main(String[] args) throws FileNotFoundException, IOException
	{

		// ########## TEST ##########
		// Cargamos fichero edificios
		String pathBuildings = "C:/Users/jlrg_/Desktop/UPCT/QGIS/OSM2QGIS/Edificios.geojson"; // Edificios
		String pathRoads = "C:/Users/jlrg_/Desktop/UPCT/QGIS/OSM2QGIS/c1.geojson"; // Carreteras
		GisImporter gi = new GisImporter();
		System.out.println("Cargando fichero buildings");
		gi.load("Cartagena", pathBuildings);

	}

    private static class ClassForJackson
    {
    	//cada una de las partes del geojson
    	//	{"type": "_", "name":"_", "crs": {"type":"_", "properties": { _ } }, "features": [{}, {}, {}] }
        public String type;
        public String name;
        public JoseLuisCrs crs;
        public List<JoseLuisFeature> features;
        
       public ClassForJackson(@JsonProperty("type") String type, @JsonProperty("name") String name,  @JsonProperty("crs") JoseLuisCrs crs ,  @JsonProperty("features") List<JoseLuisFeature> features)
        {
			this.type = type;
			this.name = name;
			this.crs = crs;
			this.features = features;
		}
    }

    private static class JoseLuisFeature{
    	public String type;
    	public Map<String,String> properties;
    }
    
    private static class JoseLuisCrs
    {
    	public String type;
    	public Map<String,String> properties;
    	
    	public JoseLuisCrs (JsonObject crs)
    	{}
    	
    }
	
}